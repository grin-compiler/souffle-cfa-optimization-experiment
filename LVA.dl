// reachibility
.decl InitialReachable(n:CodeName)
.input InitialReachable

// hardcoded edb
//InitialReachable("::Main.main").
//InitialReachable(":Main.main").
//InitialReachable("Main.main").

// Call tree
.decl CalledCode(caller:CodeName, callee:CodeName)
.output CalledCode

USED("LVA-01")
CalledCode(caller, callee) :-
  Called(r, callee),
  HasInst(caller, r). // NOTE: alts can be callers ; needs fix to include the function or closure?

// SECTION: reachability

.decl ReachableCode(n:CodeName)
.output ReachableCode

USED("LVA-02")
ReachableCode(n) :-
  InitialReachable(n).

// call
USED("LVA-03")
ReachableCode(callee) :-
  ReachableCode(caller),
  CalledCode(caller, callee).

.decl Reachable(inst:Variable)
.output Reachable

USED("LVA-06")
Reachable(inst) :-
  ReachableCode(f),
  HasInst(f, inst).


Reachable(p) :-
  ReachableCode(f),
  ( FunctionParameter(f, _, p)
  ; ClosureParameter(f, _, p)
  ; AltParameter(f, _, p)
  ).

.decl TagValue(v:Variable, t:Tag)
.output TagValue

USED("LVA-07")
TagValue(v, tag) :-
  Node(node, tag),
  NodeOrigin(v, node).

USED("LVA-08")
TagValue(v, tag) :-
  TypeNode(ty_var, tag),
  ExternalOrigin(v, _, ty_var).

// SECTION: dead code

.decl DeadCode(n:CodeName)
.output DeadCode

USED("LVA-09")
DeadCode(n) :-
  ReturnValue(n, _),
  !ReachableCode(n).

.decl DeadExternal(n:External)
.output DeadExternal

.decl ReachableExternal(n:External)
.output ReachableExternal

USED("LVA-10")
ReachableExternal(callee) :-
  ReachableCode(caller),
  ExternalFunction(callee, _, _),
  CalledCode(caller, callee).

USED("LVA-11")
DeadExternal(n) :-
  ExternalFunction(n, _, _),
  !ReachableExternal(n).

//////

.decl HasCallOp(code:CodeName)
.output HasCallOp

USED("LVA-12")
HasCallOp(code) :-
  ReturnValue(code, _),
  HasInst(code, r),
  Call(r, _, _).

USED("LVA-13")
HasCallOp(code) :- // flatten alts
  HasInst(code, r),
  Alt(r, alt, _),
  HasCallOp(alt).

.decl LeafCode(code:CodeName)
.output LeafCode

USED("LVA-14")
LeafCode(caller) :-
  HasCallOp(caller),
  !Alt(_, caller, _),
  !CalledCode(caller, _).

/////////////////////////////////

/*
  check:
    - reachable case
    - no matching alternative
    - without default pattern
*/

